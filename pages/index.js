// import { useEffect, useState } from 'react';
import Head from 'next/head';
import { MongoClient } from 'mongodb';
import MeetupList from '../components/meetups/MeetupList';
import { Fragment } from 'react';

function HomePage(props){

    // Now we no longer need below things bcs we taking data from props
    // const [loadedMeetUps, setLoadedMeetups] = useState([]);

    // useEffect(() => {
    //     // send a http request to fetch data
    //     setLoadedMeetups(Dummy_MeetUps);  
    // }, []);
    // useEffect execute this function after the component function finished executing, first time this homepage will render, 'loadedmeetups' will be an empty array, then effect func will execute and update the state and then component function will execute again // we will have two component render cycles // and next js take only first rendered cycle data it dont wait for second cycle
 
    return(
        <Fragment>
         <Head>
           <title>MeetUp Schedular</title>
           <meta
             name='description'
             content='Browse a huge list of highly active React MeetUp'
           />
         </Head> 
         <MeetupList meetups = {props.meetups} />
        </Fragment>  
       );
}
   
    // export async function getServerSideProps(context){

    //     // use getServerSideProps if u need access to concrete request object bcs we dont have access to request and response in getstaticprops 

    //     const req = context.req; 
    //     const res = context.res;
    //     // fetch data from api
    //     return{
    //         props:{
    //             meetups: Dummy_MeetUps
    //         }
    //     };

    // }

    export async function getStaticProps(){
        //fetch data from api

        const client = await MongoClient.connect('mongodb+srv://GiteshPareek:eGMSALMvO28HvudS@cluster0.tkdoyug.mongodb.net/meetups?retryWrites=true&w=majority');
    
        const db = client.db(); // to get hold of the data to which we are connecting
                                // if that data is not created yet it will be created on fly

        const meetupsCollection = db.collection('meetups');
        // Mongodb works with collections full of documents
        // collections like tables in sql db
        // documents would be the entries in those tables

        const meetups = await meetupsCollection.find().toArray();
        // so that we can get back an array of documents    

        client.close();
        //to close the connection when we done patching data from mongodb before we return

        return{
            props: {
                //  meetups: meetups , By this we get error, bcs autogenerated id is not a string its a strange object it type thing 

                meetups: meetups.map((meetup)=>({
                    title: meetup.title,
                    address: meetup.address,
                    image: meetup.image,
                    id: meetup._id.toString(),
                })), 
            },
            revalidate: 1
            
            // revalidate: 10 , by this, this page would be regenerated on the server at least every 10 sec if request is coming in
        };
    }

export default HomePage;